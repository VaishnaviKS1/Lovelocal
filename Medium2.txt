problem statement : Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class MajorityElement {
    public List<Integer> majorityElement(int[] nums) {
        List<Integer> result = new ArrayList<>();

        if (nums == null || nums.length == 0) {
            return result;
        }

        int candidate1 = 0, candidate2 = 0, count1 = 0, count2 = 0;

        
        for (int num : nums) {
            if (num == candidate1) {
                count1++;
            } else if (num == candidate2) {
                count2++;
            } else if (count1 == 0) {
                candidate1 = num;
                count1 = 1;
            } else if (count2 == 0) {
                candidate2 = num;
                count2 = 1;
            } else {
                count1--;
                count2--;
            }
        }

        
        count1 = 0;
        count2 = 0;

        for (int num : nums) {
            if (num == candidate1) {
                count1++;
            } else if (num == candidate2) {
                count2++;
            }
        }

        
        int n = nums.length;

        if (count1 > n / 3) {
            result.add(candidate1);
        }
        if (count2 > n / 3 && candidate1 != candidate2) {
            result.add(candidate2);
        }

        return result;
    }

    public static void main(String[] args) {
        MajorityElement solution = new MajorityElement();
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter the elements of the array (separated by spaces):");
        String input = scanner.nextLine();
        String[] elements = input.split(" ");
        int[] nums = new int[elements.length];

        for (int i = 0; i < elements.length; i++) {
            nums[i] = Integer.parseInt(elements[i]);
        }

        List<Integer> result = solution.majorityElement(nums);
        System.out.println("Elements that appear more than ⌊ n/3 ⌋ times: " + result);
    }
}

Logic and Algorithm:
Initialization:

The majorityElement method initializes an empty ArrayList called result to store the elements that appear more than ⌊ n/3 ⌋ times.
Input Validation:

It checks if the input array nums is null or empty. If so, it returns an empty result list since there are no elements to analyze.
Voting Process:

It uses the Boyer-Moore Majority Vote algorithm to find potential candidates for majority elements.
It initializes two candidates (candidate1 and candidate2) and their respective counts (count1 and count2) to keep track of potential majority elements.
It iterates through the array nums:
If the current number is equal to candidate1, it increments count1.
If the current number is equal to candidate2, it increments count2.
If count1 is 0, it sets the current number as candidate1 with a count of 1.
If count2 is 0, it sets the current number as candidate2 with a count of 1.
If both counts are non-zero, it decrements both counts (simulating a "cancellation" of pairs).
Count Occurrences:

It resets the counts (count1 and count2) to 0 and iterates through the array again to count the occurrences of the potential candidates.
Result Generation:

It checks if the count of candidate1 is greater than ⌊ n/3 ⌋ and adds it to the result list if true.
It checks if the count of candidate2 is greater than ⌊ n/3 ⌋ and adds it to the result list if true. Also, ensures that candidate1 and candidate2 are different.
Printing Result:

In the main method, the program prompts the user to enter the elements of the array (separated by spaces).
It splits the input string and converts it into an integer array nums.
It calls the majorityElement method with the input array nums.
It prints the elements that appear more than ⌊ n/3 ⌋ times in the input array.
Overall, the algorithm efficiently identifies potential majority elements in a single pass through the array, and then counts the occurrences of these potential candidates to determine the final result. The Boyer-Moore Majority Vote algorithm ensures a linear runtime complexity for this problem.
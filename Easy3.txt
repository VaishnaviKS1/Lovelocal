problem statement : Given an integer numRows, return the first numRows of Pascal's triangle.
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class PascalTriangle {

    public static List<List<Integer>> generate(int numRows) {
        List<List<Integer>> triangle = new ArrayList<>();

        if (numRows <= 0) {
            return triangle;
        }

        for (int i = 0; i < numRows; i++) {
            List<Integer> row = new ArrayList<>();
            for (int j = 0; j <= i; j++) {
                if (j == 0 || j == i) {
                    row.add(1);
                } else {
                    int value = triangle.get(i - 1).get(j - 1) + triangle.get(i - 1).get(j);
                    row.add(value);
                }
            }
            triangle.add(row);
        }

        return triangle;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of rows for Pascal's Triangle: ");
        int numRows = scanner.nextInt();

        List<List<Integer>> result = generate(numRows);
        System.out.println(result);

        scanner.close();
    }
}
Initialization:

The method generate initializes an empty ArrayList called triangle to store the rows of Pascal's Triangle.
Input Validation:

It checks if the input numRows is less than or equal to 0. If so, it returns an empty list since there are no rows to generate.
Generating Rows:

The code uses a nested loop to generate each row of Pascal's Triangle.
The outer loop (i) iterates from 0 to numRows - 1 to generate each row.
The inner loop (j) iterates from 0 to i to generate each element in the current row.
Element Calculation:

For each element in the row:
If j is the first or last element in the row (i.e., j == 0 or j == i), it adds 1 to the row since the first and last elements of each row in Pascal's Triangle are always 1.
If j is neither the first nor the last element, it calculates the value by adding the two elements above it from the previous row (triangle.get(i - 1).get(j - 1) and triangle.get(i - 1).get(j)) and adds this value to the row.
Row Addition:

After completing a row, it adds the row to the triangle.
Printing Result:

The main method prompts the user to enter the number of rows (numRows) they want for Pascal's Triangle.
It calls the generate method with the input numRows.
It prints the resulting Pascal's Triangle.
Overall, the algorithm leverages the properties of Pascal's Triangle, where each number is the sum of the two numbers immediately above it in the previous row. The code constructs Pascal's Triangle row by row, following this pattern.